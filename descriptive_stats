{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "362d6885",
   "metadata": {},
   "source": [
    "# 3.1 Age Income"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e26ef1db",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import statistics\n",
    "import numpy as np\n",
    "import scipy.stats\n",
    "import pandas as pd\n",
    "import csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fbae24c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('Age_Income.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4577d43b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Young</td>\n",
       "      <td>25000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>54000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Old</td>\n",
       "      <td>60000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Young</td>\n",
       "      <td>15000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Young</td>\n",
       "      <td>45000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Young</td>\n",
       "      <td>65000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Young</td>\n",
       "      <td>70000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Young</td>\n",
       "      <td>30000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>27000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Young</td>\n",
       "      <td>23000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Young</td>\n",
       "      <td>48000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Old</td>\n",
       "      <td>52000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Young</td>\n",
       "      <td>33000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Old</td>\n",
       "      <td>80000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Old</td>\n",
       "      <td>75000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Old</td>\n",
       "      <td>35000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>29000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>57000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Old</td>\n",
       "      <td>43000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>56000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Old</td>\n",
       "      <td>63000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Old</td>\n",
       "      <td>32000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Old</td>\n",
       "      <td>45000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Old</td>\n",
       "      <td>89000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>90000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>93000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Young</td>\n",
       "      <td>80000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Young</td>\n",
       "      <td>87000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Young</td>\n",
       "      <td>38000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Young</td>\n",
       "      <td>23000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>38900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>53200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Old</td>\n",
       "      <td>43800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>25600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>65400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Old</td>\n",
       "      <td>76800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Old</td>\n",
       "      <td>89700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Old</td>\n",
       "      <td>41800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Young</td>\n",
       "      <td>31900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Old</td>\n",
       "      <td>25600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>45700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Old</td>\n",
       "      <td>35600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Young</td>\n",
       "      <td>54300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>65400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Old</td>\n",
       "      <td>67800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Old</td>\n",
       "      <td>24500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>34900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Old</td>\n",
       "      <td>45300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Young</td>\n",
       "      <td>68400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Middle Age</td>\n",
       "      <td>51700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Age  Income\n",
       "0        Young   25000\n",
       "1   Middle Age   54000\n",
       "2          Old   60000\n",
       "3        Young   15000\n",
       "4        Young   45000\n",
       "5        Young   65000\n",
       "6        Young   70000\n",
       "7        Young   30000\n",
       "8   Middle Age   27000\n",
       "9        Young   23000\n",
       "10       Young   48000\n",
       "11         Old   52000\n",
       "12       Young   33000\n",
       "13         Old   80000\n",
       "14         Old   75000\n",
       "15         Old   35000\n",
       "16  Middle Age   29000\n",
       "17  Middle Age   57000\n",
       "18         Old   43000\n",
       "19  Middle Age   56000\n",
       "20         Old   63000\n",
       "21         Old   32000\n",
       "22         Old   45000\n",
       "23         Old   89000\n",
       "24  Middle Age   90000\n",
       "25  Middle Age   93000\n",
       "26       Young   80000\n",
       "27       Young   87000\n",
       "28       Young   38000\n",
       "29       Young   23000\n",
       "30  Middle Age   38900\n",
       "31  Middle Age   53200\n",
       "32         Old   43800\n",
       "33  Middle Age   25600\n",
       "34  Middle Age   65400\n",
       "35         Old   76800\n",
       "36         Old   89700\n",
       "37         Old   41800\n",
       "38       Young   31900\n",
       "39         Old   25600\n",
       "40  Middle Age   45700\n",
       "41         Old   35600\n",
       "42       Young   54300\n",
       "43  Middle Age   65400\n",
       "44         Old   67800\n",
       "45         Old   24500\n",
       "46  Middle Age   34900\n",
       "47         Old   45300\n",
       "48       Young   68400\n",
       "49  Middle Age   51700"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "16d2cff1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            count          mean           std      min      25%      50%  \\\n",
      "Age                                                                        \n",
      "Middle Age   15.0  52453.333333  20497.800114  25600.0  36900.0  53200.0   \n",
      "Old          19.0  53942.105263  20868.165968  24500.0  38700.0  45300.0   \n",
      "Young        16.0  46037.500000  22356.859499  15000.0  28750.0  41500.0   \n",
      "\n",
      "                75%      max  \n",
      "Age                           \n",
      "Middle Age  61200.0  93000.0  \n",
      "Old         71400.0  89700.0  \n",
      "Young       65850.0  87000.0  \n"
     ]
    }
   ],
   "source": [
    "summary_stats = data.groupby('Age')['Income'].describe()\n",
    "print(summary_stats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "de69afc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "age_numeric_encoding = {\n",
    "    'Young': 1,\n",
    "    'Middle Age': 2,\n",
    "    'Old': 3\n",
    "}\n",
    "\n",
    "data['Age_numeric'] = data['Age'].map(age_numeric_encoding)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27f92df1",
   "metadata": {},
   "source": [
    "# Mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d441d0f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "income_np = np.array(data['Income'])\n",
    "income_df = pd.Series(data['Income'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "da2a35be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50966.0\n",
      "50966\n",
      "50966.0\n",
      "50966.0\n"
     ]
    }
   ],
   "source": [
    "#Formula\n",
    "mean_income = sum(data['Income'])/len(data['Income'])\n",
    "print(mean_income)\n",
    "\n",
    "#statistics library function\n",
    "mean_income=statistics.mean(data['Income'])\n",
    "print(mean_income)\n",
    "\n",
    "#  Using NumPy function\n",
    "mean_income = np.mean(income_np)\n",
    "print(mean_income)\n",
    "\n",
    "#Using Pandas function\n",
    "mean_income = income_df.mean()\n",
    "print(mean_income)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa74f443",
   "metadata": {},
   "source": [
    "# Median"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e6810297",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46850.0\n"
     ]
    }
   ],
   "source": [
    "#formula\n",
    "n = len(data['Income'])\n",
    "if n % 2:\n",
    "    median_income = sorted(data['Income'])[round(0.5*(n-1))]\n",
    "else:\n",
    "    x_ord, index = sorted(data['Income']), round(0.5 * n)\n",
    "    median_income = 0.5 * (x_ord[index-1] + x_ord[index])\n",
    "\n",
    "print(median_income)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0b40efb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46850.0\n",
      "46850.0\n",
      "46850.0\n"
     ]
    }
   ],
   "source": [
    "# Using Statistics Library function\n",
    "median_income = statistics.median(data['Income'])\n",
    "print(median_income)\n",
    "\n",
    "# Using NumPy function\n",
    "median_income = np.median(income_np)\n",
    "print(median_income)\n",
    "\n",
    "# Using Pandas function\n",
    "median_income = income_df.median()\n",
    "print(median_income)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9a7f8be",
   "metadata": {},
   "source": [
    "# Mode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8316a1cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45000\n",
      "45000\n"
     ]
    }
   ],
   "source": [
    "# Finding the mode without any library\n",
    "income_counts = {}\n",
    "for item in data['Income']:\n",
    "    if item in income_counts:\n",
    "        income_counts[item] += 1\n",
    "    else:\n",
    "        income_counts[item] = 1\n",
    "\n",
    "mode_income = max(income_counts, key=income_counts.get)\n",
    "print(mode_income)\n",
    "\n",
    "# Using Statistics Library function\n",
    "mode_income = statistics.mode(data['Income'])\n",
    "print(mode_income)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b452794b",
   "metadata": {},
   "source": [
    "# Varience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c28fa03a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "445070044.8979592\n"
     ]
    }
   ],
   "source": [
    "n = len(data['Income'])\n",
    "income_mean = sum(data['Income']) / n\n",
    "income_var = sum((item - income_mean)**2 for item in data['Income']) / (n - 1)\n",
    "print(income_var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ff1f7261",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "445070044.8979592\n",
      "445070044.8979592\n",
      "445070044.8979592\n"
     ]
    }
   ],
   "source": [
    "# Using Statistics library function\n",
    "income_var = statistics.variance(data['Income'])\n",
    "print(income_var)\n",
    "\n",
    "# Using NumPy library function\n",
    "income_var = np.var(income_np, ddof=1) #Here the ddof stands for delta degrees of freedom. This parameter allows the proper calculation of 𝑠², with (𝑛 − 1) in the denominator instead of 𝑛.\n",
    "print(income_var)\n",
    "\n",
    "# Using Pandas Library function\n",
    "income_var = income_df.var(ddof=1)\n",
    "print(income_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f67ef35c",
   "metadata": {},
   "source": [
    "# Strandard Deviation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "de860849",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21096.683267707253\n"
     ]
    }
   ],
   "source": [
    "# Calculating Variance using Formula (without libraries)\n",
    "income_std = income_var**0.5\n",
    "print(income_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5fc1fe86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21096.683267707253\n",
      "21096.683267707253\n",
      "21096.683267707253\n"
     ]
    }
   ],
   "source": [
    "# Using Statistics library function\n",
    "income_std = statistics.stdev(data['Income'])\n",
    "print(income_std)\n",
    "\n",
    "# Using NumPy library function\n",
    "income_std = np.std(income_np, ddof=1) #Here the ddof stands for delta degrees of freedom. This parameter allows the proper calculation of 𝑠², with (𝑛 − 1) in the denominator instead of 𝑛.\n",
    "print(income_std)\n",
    "\n",
    "# Using Pandas Library function\n",
    "income_std = income_df.std(ddof=1)\n",
    "print(income_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fde9f683",
   "metadata": {},
   "source": [
    "# Skewness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "69d33fb5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3896340114677523\n"
     ]
    }
   ],
   "source": [
    "# Calculating Skewness using formula (without libraries)\n",
    "n = len(data['Income'])\n",
    "income_mean = sum(data['Income']) / n\n",
    "income_var = sum((item - income_mean)**2 for item in data['Income']) / (n - 1)\n",
    "income_std = income_var ** 0.5\n",
    "income_skew = (sum((item - income_mean)**3 for item in data['Income'])* n / ((n - 1) * (n - 2) * income_std**3))\n",
    "print(income_skew)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "402233d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3896340114677522\n",
      "0.3896340114677522\n"
     ]
    }
   ],
   "source": [
    "# Using Scipy library function\n",
    "income_skew=scipy.stats.skew(income_np, bias=False) #Here the parameter bias is set to False to enable the corrections for statistical bias.\n",
    "print(income_skew)\n",
    "# Using Pandas Library function\n",
    "income_df.skew()\n",
    "print(income_skew)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e1fcd192",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This distribution has skew 0.38963401146775223\n",
      "This distribution has kurtosis -0.8429291874944673\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "norm = income_df\n",
    "norm.plot(kind = 'density')\n",
    "print('This distribution has skew', norm.skew())\n",
    "print('This distribution has kurtosis', norm.kurt())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c8f04f4",
   "metadata": {},
   "source": [
    "# ---------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "123a35d6",
   "metadata": {},
   "source": [
    "# 3.2 Iris"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c9967e05",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris = pd.read_csv('Iris.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0c40b3cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>146</td>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>147</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>148</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>149</td>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>150</td>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  \\\n",
       "0      1            5.1           3.5            1.4           0.2   \n",
       "1      2            4.9           3.0            1.4           0.2   \n",
       "2      3            4.7           3.2            1.3           0.2   \n",
       "3      4            4.6           3.1            1.5           0.2   \n",
       "4      5            5.0           3.6            1.4           0.2   \n",
       "..   ...            ...           ...            ...           ...   \n",
       "145  146            6.7           3.0            5.2           2.3   \n",
       "146  147            6.3           2.5            5.0           1.9   \n",
       "147  148            6.5           3.0            5.2           2.0   \n",
       "148  149            6.2           3.4            5.4           2.3   \n",
       "149  150            5.9           3.0            5.1           1.8   \n",
       "\n",
       "            Species  \n",
       "0       Iris-setosa  \n",
       "1       Iris-setosa  \n",
       "2       Iris-setosa  \n",
       "3       Iris-setosa  \n",
       "4       Iris-setosa  \n",
       "..              ...  \n",
       "145  Iris-virginica  \n",
       "146  Iris-virginica  \n",
       "147  Iris-virginica  \n",
       "148  Iris-virginica  \n",
       "149  Iris-virginica  \n",
       "\n",
       "[150 rows x 6 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4f9b6e62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'], dtype=object)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris['Species'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "1ab35c43",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to calculate mean\n",
    "def calculate_mean(data):\n",
    "    return sum(data) / len(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0bc4f121",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to calculate mode\n",
    "def calculate_mode(data):\n",
    "    frequency_dict = {}\n",
    "    for value in data:\n",
    "        frequency_dict[value] = frequency_dict.get(value, 0) + 1\n",
    "    mode_frequency = max(frequency_dict.values())\n",
    "    mode = [key for key, value in frequency_dict.items() if value == mode_frequency]\n",
    "    return mode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "082ba7ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to calculate median\n",
    "def calculate_median(data):\n",
    "    sorted_data = sorted(data)\n",
    "    n = len(data)\n",
    "    if n % 2 == 0:\n",
    "        return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2\n",
    "    else:\n",
    "        return sorted_data[n // 2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "931c5c8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to calculate variance\n",
    "def calculate_variance(data):\n",
    "    mean = calculate_mean(data)\n",
    "    variance = sum((x - mean) ** 2 for x in data) / len(data)\n",
    "    return variance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "bd207301",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to calculate standard deviation\n",
    "def calculate_standard_deviation(data):\n",
    "    variance = calculate_variance(data)\n",
    "    return variance ** 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f13ccc3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to calculate skewness\n",
    "def calculate_skewness(data):\n",
    "    mean = calculate_mean(data)\n",
    "    std_dev = calculate_standard_deviation(data)\n",
    "    skewness = sum((x - mean) ** 3 for x in data) / (len(data) * std_dev ** 3)\n",
    "    return skewness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ac04230b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm',\n",
       "       'Species'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "6b3ef0ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics for SepalLengthCm: \n",
      "Mean: 5.471000000000003 \n",
      "Mode: [5.0] \n",
      "Median: 5.4 \n",
      "Variance: 0.4076590000000003 \n",
      "Standard Deviation: 0.6384817930058776 \n",
      "Skewness: 0.40909619018225835 \n",
      "\n",
      "Statistics for SepalWidthCm: \n",
      "Mean: 3.0940000000000003 \n",
      "Mode: [3.0] \n",
      "Median: 3.05 \n",
      "Variance: 0.22436399999999992 \n",
      "Standard Deviation: 0.4736707717391901 \n",
      "Skewness: 0.18592170815729164 \n",
      "\n",
      "Statistics for PetalLengthCm: \n",
      "Mean: 2.8620000000000005 \n",
      "Mode: [1.5] \n",
      "Median: 2.45 \n",
      "Variance: 2.0773560000000004 \n",
      "Standard Deviation: 1.4413035766277695 \n",
      "Skewness: 0.12106922928291142 \n",
      "\n",
      "Statistics for PetalWidthCm: \n",
      "Mean: 0.7849999999999998 \n",
      "Mode: [0.2] \n",
      "Median: 0.8 \n",
      "Variance: 0.31747500000000006 \n",
      "Standard Deviation: 0.5634491991297885 \n",
      "Skewness: 0.1260041348921774 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Define a function to calculate statistics for a given column\n",
    "def calculate_statistics(data):\n",
    "    mean = calculate_mean(data)\n",
    "    mode = calculate_mode(data)\n",
    "    median = calculate_median(data)\n",
    "    variance = calculate_variance(data)\n",
    "    std_dev = calculate_standard_deviation(data)\n",
    "    skewness = calculate_skewness(data)\n",
    "    return mean, mode, median, variance, std_dev, skewness\n",
    "\n",
    "# Filter the dataset for 'Iris-setosa' and 'Iris-versicolor'\n",
    "filtered_data = iris[(iris['Species'] == 'Iris-setosa') | (iris['Species'] == 'Iris-versicolor')]\n",
    "\n",
    "# Get data for each column except 'Id' and 'Species'\n",
    "columns = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']\n",
    "for column in columns:\n",
    "    column_data = filtered_data[column].tolist()\n",
    "    mean, mode, median, variance, std_dev, skewness = calculate_statistics(column_data)\n",
    "    print(f\"Statistics for {column}:\", \"\\nMean:\", mean, \"\\nMode:\", mode, \"\\nMedian:\", median, \"\\nVariance:\", variance, \"\\nStandard Deviation:\", std_dev, \"\\nSkewness:\", skewness, \"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45c8d1be",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
