import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import stats
from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import re

data = pd.read_csv('Banglore_Housing_Prices.csv')
data.head()
data.shape
data.dtypes
data

def convert_to_float(x):
    if isinstance(x, float):
        return x
    if '-' in x:
        # Extract numbers from the string and take the average
        nums = [float(num) for num in x.split('-')]
        return np.mean(nums)
    try:
        return float(x)
    except ValueError:
        return np.nan 

# Convert 'total_sqft' column to float64
data['total_sqft'] = data['total_sqft'].apply(convert_to_float)

# Check the data types after conversion
print(data['total_sqft'].dtype)

data.dtypes

data['size'] = data['size'].str.extract('(\d+)').astype(float)
print(data['size'].dtype)

data.describe()
print(data.isnull().sum())
data['size'] = data['size'].replace(np.NaN, data['size'].mean())
data['total_sqft'] = data['total_sqft'].replace(np.NaN, data['total_sqft'].mean())
data['bath'] = data['bath'].replace(np.NaN, data['bath'].mean())
print(data.isnull().sum())

x = data['total_sqft']
y = data['price']
plt. figure(figsize=(20, 10))
plt.scatter(x,y)
plt.show()

for column in data.columns:
    print(f"Size of {column} column: {data[column].size}")

def linfun(x):
    l = slope*x + intercept
    return l
mymodel = list(map(linfun,x))
plt.scatter(x,y)
plt.plot(x,mymodel)
plt.show()

reg.coef_
reg.intercept_
# 1 bhk, 800 sqft , 1 bathroom
reg.predict([[1,800,1]])
# 3 bhk, 2500 sqft , 2 bathroom
reg.predict([[3,2500,2]])


#chatgpt:
bangalore_house_df['total_sqft'] = bangalore_house_df['total_sqft'].apply(convert_sqft_to_num)

# d) Calculate and add one more column as ‘Price_Per_Sqft’
bangalore_house_df['Price_Per_Sqft'] = bangalore_house_df['price'] / bangalore_house_df['total_sqft']

# e) Remove outliers
# Assuming Price_Per_Sqft and Size as relevant columns for outliers
z_scores = (bangalore_house_df[['Price_Per_Sqft', 'Size']] - bangalore_house_df[['Price_Per_Sqft', 'Size']].mean()) / bangalore_house_df[['Price_Per_Sqft', 'Size']].std()
bangalore_house_df = bangalore_house_df[(z_scores < 3).all(axis=1)]

# f) Apply Linear Regression model
X = bangalore_house_df[['total_sqft', 'Size']]
y = bangalore_house_df['price']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on training and testing data
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Calculate Mean Squared Error
train_mse = mean_squared_error(y_train, y_train_pred)
test_mse = mean_squared_error(y_test, y_test_pred)

print("Training Mean Squared Error:", train_mse)
print("Testing Mean Squared Error:", test_mse)







